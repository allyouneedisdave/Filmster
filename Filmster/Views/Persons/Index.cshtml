@model PagedList.IPagedList<Filmster.Models.ViewModels.PersonViewModel>
@using PagedList.Mvc
<link href="~Content/PagedList.css" rel="stylesheet" type="text/css" />


@{
    ViewBag.Title = "Index";
}


<!--Autocomplete jQuery for search box-->
<script type="text/javascript">
    $(document).ready(function () {
        $("[name='searchString']").autocomplete({
            source: '@Url.Action("Search")',
            minLength: 2,
            select: function (event, ui) {
                window.location = '@Url.Action("Details")'
                    + '/' + ui.item.id
            }
        });
    })
</script>

<!--Validated for any error message passed into the viewbag from a controller and display if present.-->
@if (ViewBag.ErrorMessage != null)
{
    if (ViewBag.ErrorMessage == "An image must be uploaded.")
    {
        <script>window.alert("An image must be uploaded.");</script>
    }
    else if (ViewBag.ErrorMessage == "A valid image image format was not uploaded.")
    {
        <script>window.alert("A valid image image format was not uploaded.");</script>
    }
    else if (ViewBag.ErrorMessage == "Please select a film to create a review.")
    {
        <script>window.alert("Please select a film to create a review.");</script>
    }



}

<h2 class="h2-adjusted">Actors/Directors</h2>

<p>
    @Html.ActionLink("Create New", "Create")
</p>

@using (Html.BeginForm("Index", "Persons", FormMethod.Get))
{
    <p>
        Find by title: @Html.TextBox("searchString",
ViewBag.CurrentFilter as string)
        <input type="submit" value="Search" />
    </p>
}


<table class="table">
    <tr>

        <th>
            @Html.DisplayNameFor(model => model.FirstOrDefault().ThisPersonImage.ImageBytes)
        </th>
        <th>
            @Html.ActionLink("First Name", "Index",
                        new
                             {
                                 sortOrder = ViewBag.TitleSortParam,
                            currentFilter = ViewBag.CurrentFilter,
                            columnClicked = "First Name"
                             })
        </th>
        <th>
            @Html.ActionLink("Last Name", "Index",
                        new
                             {
                                 sortOrder = ViewBag.TitleSortParam,
                            currentFilter = ViewBag.CurrentFilter,
                            columnClicked = "Last Name"
                             })
        </th>
        @*<th>
                @Html.DisplayNameFor(model => model.IsActor)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.IsDirector)
            </th>*@
        <th>
            @Html.DisplayNameFor(model => model.FirstOrDefault().ThisPerson.Biography)
        </th>
        <th></th>
    </tr>

    @foreach (var item in Model)
    {
        <tr>
            <td>
                @if (item.ThisPersonImage.ImageBytes != null)
                {
                    //Convert the image bytes into a png for displaying on the page.
                    <img height="100px" ; src="@String.Format("data:image/png;base64,{0}", Convert.ToBase64String(item.ThisPersonImage.ImageBytes))" />
                }
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ThisPerson.FirstName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ThisPerson.LastName)
            </td>
            @*<td>
                    @Html.DisplayFor(modelItem => item.IsActor)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.IsDirector)
                </td>*@
            <td>
                @Html.DisplayFor(modelItem => item.ThisPerson.PersonShortBio)
            </td>
            <td>
                @Html.ActionLink("Edit", "Edit", new { id = item.ThisPerson.PersonId }) |
                @Html.ActionLink("Details", "Details", new { id = item.ThisPerson.PersonId }) |
                @Html.ActionLink("Delete", "Delete", new { id = item.ThisPerson.PersonId })
            </td>
        </tr>
    }

</table>

Page @(Model.PageCount < Model.PageNumber ?
0 : Model.PageNumber) of @Model.PageCount

@Html.PagedListPager(Model, page => Url.Action("Index",
    new
    {
        page,
        sortOrder = ViewBag.CurrentSort,
        currentFilter = ViewBag.CurrentFilter
    }))
